window.PEG = // @generated by Peggy 4.0.2.
    //
    // https://peggyjs.org/
    (function () {
        "use strict";

        function peg$subclass(child, parent) {
            function C() { this.constructor = child; }
            C.prototype = parent.prototype;
            child.prototype = new C();
        }

        function peg$SyntaxError(message, expected, found, location) {
            var self = Error.call(this, message);
            // istanbul ignore next Check is a necessary evil to support older environments
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(self, peg$SyntaxError.prototype);
            }
            self.expected = expected;
            self.found = found;
            self.location = location;
            self.name = "SyntaxError";
            return self;
        }

        peg$subclass(peg$SyntaxError, Error);

        function peg$padEnd(str, targetLength, padString) {
            padString = padString || " ";
            if (str.length > targetLength) { return str; }
            targetLength -= str.length;
            padString += padString.repeat(targetLength);
            return str + padString.slice(0, targetLength);
        }

        peg$SyntaxError.prototype.format = function (sources) {
            var str = "Error: " + this.message;
            if (this.location) {
                var src = null;
                var k;
                for (k = 0; k < sources.length; k++) {
                    if (sources[k].source === this.location.source) {
                        src = sources[k].text.split(/\r\n|\n|\r/g);
                        break;
                    }
                }
                var s = this.location.start;
                var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
                    ? this.location.source.offset(s)
                    : s;
                var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
                if (src) {
                    var e = this.location.end;
                    var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
                    var line = src[s.line - 1];
                    var last = s.line === e.line ? e.column : line.length + 1;
                    var hatLen = (last - s.column) || 1;
                    str += "\n --> " + loc + "\n"
                        + filler + " |\n"
                        + offset_s.line + " | " + line + "\n"
                        + filler + " | " + peg$padEnd("", s.column - 1, ' ')
                        + peg$padEnd("", hatLen, "^");
                } else {
                    str += "\n at " + loc;
                }
            }
            return str;
        };

        peg$SyntaxError.buildMessage = function (expected, found) {
            var DESCRIBE_EXPECTATION_FNS = {
                literal: function (expectation) {
                    return "\"" + literalEscape(expectation.text) + "\"";
                },

                class: function (expectation) {
                    var escapedParts = expectation.parts.map(function (part) {
                        return Array.isArray(part)
                            ? classEscape(part[0]) + "-" + classEscape(part[1])
                            : classEscape(part);
                    });

                    return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
                },

                any: function () {
                    return "any character";
                },

                end: function () {
                    return "end of input";
                },

                other: function (expectation) {
                    return expectation.description;
                }
            };

            function hex(ch) {
                return ch.charCodeAt(0).toString(16).toUpperCase();
            }

            function literalEscape(s) {
                return s
                    .replace(/\\/g, "\\\\")
                    .replace(/"/g, "\\\"")
                    .replace(/\0/g, "\\0")
                    .replace(/\t/g, "\\t")
                    .replace(/\n/g, "\\n")
                    .replace(/\r/g, "\\r")
                    .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
            }

            function classEscape(s) {
                return s
                    .replace(/\\/g, "\\\\")
                    .replace(/\]/g, "\\]")
                    .replace(/\^/g, "\\^")
                    .replace(/-/g, "\\-")
                    .replace(/\0/g, "\\0")
                    .replace(/\t/g, "\\t")
                    .replace(/\n/g, "\\n")
                    .replace(/\r/g, "\\r")
                    .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
            }

            function describeExpectation(expectation) {
                return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
            }

            function describeExpected(expected) {
                var descriptions = expected.map(describeExpectation);
                var i, j;

                descriptions.sort();

                if (descriptions.length > 0) {
                    for (i = 1, j = 1; i < descriptions.length; i++) {
                        if (descriptions[i - 1] !== descriptions[i]) {
                            descriptions[j] = descriptions[i];
                            j++;
                        }
                    }
                    descriptions.length = j;
                }

                switch (descriptions.length) {
                    case 1:
                        return descriptions[0];

                    case 2:
                        return descriptions[0] + " or " + descriptions[1];

                    default:
                        return descriptions.slice(0, -1).join(", ")
                            + ", or "
                            + descriptions[descriptions.length - 1];
                }
            }

            function describeFound(found) {
                return found ? "\"" + literalEscape(found) + "\"" : "end of input";
            }

            return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };

        function peg$parse(input, options) {
            options = options !== undefined ? options : {};

            var peg$FAILED = {};
            var peg$source = options.grammarSource;

            var peg$startRuleFunctions = { s: peg$parses };
            var peg$startRuleFunction = peg$parses;

            var peg$c0 = ".global";
            var peg$c1 = ".section";
            var peg$c2 = ".data";
            var peg$c3 = ".text";
            var peg$c4 = ".bss";
            var peg$c5 = ".word";
            var peg$c6 = ".half";
            var peg$c7 = ".byte";
            var peg$c8 = ".ascii";
            var peg$c9 = ".asciz";
            var peg$c10 = ".skip";
            var peg$c11 = ".float";
            var peg$c12 = ".space";
            var peg$c13 = ":";
            var peg$c14 = ",";
            var peg$c15 = "[";
            var peg$c16 = "]";
            var peg$c17 = "=";
            var peg$c18 = "x";
            var peg$c19 = "W";
            var peg$c20 = "#";
            var peg$c21 = "SP";
            var peg$c22 = ".";
            var peg$c23 = "0b";
            var peg$c24 = "'";
            var peg$c25 = "\"";
            var peg$c26 = "//";
            var peg$c27 = "LDR";
            var peg$c28 = "LDRB";
            var peg$c29 = "LDP";
            var peg$c30 = "STRB";
            var peg$c31 = "STR";
            var peg$c32 = "STP";
            var peg$c33 = "ADD";
            var peg$c34 = "SUB";
            var peg$c35 = "MUL";
            var peg$c36 = "UDIV";
            var peg$c37 = "SDIV";
            var peg$c38 = "AND";
            var peg$c39 = "ORR";
            var peg$c40 = "EOR";
            var peg$c41 = "MVN";
            var peg$c42 = "LSL";
            var peg$c43 = "LSR";
            var peg$c44 = "ASR";
            var peg$c45 = "ROR";
            var peg$c46 = "BEQ";
            var peg$c47 = "BNE";
            var peg$c48 = "BGT";
            var peg$c49 = "BLT";
            var peg$c50 = "B";
            var peg$c51 = "BL";
            var peg$c52 = "RET";
            var peg$c53 = "CMP";
            var peg$c54 = "B.EQ";
            var peg$c55 = "B.GT";
            var peg$c56 = "B.LT";
            var peg$c57 = "MOV";
            var peg$c58 = "LOOP";
            var peg$c59 = "SVC";
            var peg$c60 = "MSR";

            var peg$r0 = /^[a-zA-Z_]/;
            var peg$r1 = /^[a-zA-Z0-9_]/;
            var peg$r2 = /^[0-3]/;
            var peg$r3 = /^[0-9]/;
            var peg$r4 = /^[01]/;
            var peg$r5 = /^[A-Za-z]/;
            var peg$r6 = /^[^"]/;
            var peg$r7 = /^[\r\n]/;
            var peg$r8 = /^[ \t\n\r]/;

            var peg$e0 = peg$literalExpectation(".global", false);
            var peg$e1 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
            var peg$e2 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
            var peg$e3 = peg$literalExpectation(".section", false);
            var peg$e4 = peg$literalExpectation(".data", false);
            var peg$e5 = peg$literalExpectation(".text", false);
            var peg$e6 = peg$literalExpectation(".bss", false);
            var peg$e7 = peg$literalExpectation(".word", false);
            var peg$e8 = peg$literalExpectation(".half", false);
            var peg$e9 = peg$literalExpectation(".byte", false);
            var peg$e10 = peg$literalExpectation(".ascii", false);
            var peg$e11 = peg$literalExpectation(".asciz", false);
            var peg$e12 = peg$literalExpectation(".skip", false);
            var peg$e13 = peg$literalExpectation(".float", false);
            var peg$e14 = peg$literalExpectation(".space", false);
            var peg$e15 = peg$literalExpectation(":", false);
            var peg$e16 = peg$literalExpectation(",", false);
            var peg$e17 = peg$literalExpectation("[", false);
            var peg$e18 = peg$literalExpectation("]", false);
            var peg$e19 = peg$literalExpectation("=", false);
            var peg$e20 = peg$literalExpectation("x", false);
            var peg$e21 = peg$classExpectation([["0", "3"]], false, false);
            var peg$e22 = peg$classExpectation([["0", "9"]], false, false);
            var peg$e23 = peg$literalExpectation("W", false);
            var peg$e24 = peg$literalExpectation("#", false);
            var peg$e25 = peg$literalExpectation("SP", false);
            var peg$e26 = peg$literalExpectation(".", false);
            var peg$e27 = peg$literalExpectation("0b", false);
            var peg$e28 = peg$classExpectation(["0", "1"], false, false);
            var peg$e29 = peg$literalExpectation("'", false);
            var peg$e30 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
            var peg$e31 = peg$literalExpectation("\"", false);
            var peg$e32 = peg$classExpectation(["\""], true, false);
            var peg$e33 = peg$literalExpectation("//", false);
            var peg$e34 = peg$classExpectation(["\r", "\n"], false, false);
            var peg$e35 = peg$anyExpectation();
            var peg$e36 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
            var peg$e37 = peg$literalExpectation("LDR", false);
            var peg$e38 = peg$literalExpectation("LDRB", false);
            var peg$e39 = peg$literalExpectation("LDP", false);
            var peg$e40 = peg$literalExpectation("STRB", false);
            var peg$e41 = peg$literalExpectation("STR", false);
            var peg$e42 = peg$literalExpectation("STP", false);
            var peg$e43 = peg$literalExpectation("ADD", false);
            var peg$e44 = peg$literalExpectation("SUB", false);
            var peg$e45 = peg$literalExpectation("MUL", false);
            var peg$e46 = peg$literalExpectation("UDIV", false);
            var peg$e47 = peg$literalExpectation("SDIV", false);
            var peg$e48 = peg$literalExpectation("AND", false);
            var peg$e49 = peg$literalExpectation("ORR", false);
            var peg$e50 = peg$literalExpectation("EOR", false);
            var peg$e51 = peg$literalExpectation("MVN", false);
            var peg$e52 = peg$literalExpectation("LSL", false);
            var peg$e53 = peg$literalExpectation("LSR", false);
            var peg$e54 = peg$literalExpectation("ASR", false);
            var peg$e55 = peg$literalExpectation("ROR", false);
            var peg$e56 = peg$literalExpectation("BEQ", false);
            var peg$e57 = peg$literalExpectation("BNE", false);
            var peg$e58 = peg$literalExpectation("BGT", false);
            var peg$e59 = peg$literalExpectation("BLT", false);
            var peg$e60 = peg$literalExpectation("B", false);
            var peg$e61 = peg$literalExpectation("BL", false);
            var peg$e62 = peg$literalExpectation("RET", false);
            var peg$e63 = peg$literalExpectation("CMP", false);
            var peg$e64 = peg$literalExpectation("B.EQ", false);
            var peg$e65 = peg$literalExpectation("B.GT", false);
            var peg$e66 = peg$literalExpectation("B.LT", false);
            var peg$e67 = peg$literalExpectation("MOV", false);
            var peg$e68 = peg$literalExpectation("LOOP", false);
            var peg$e69 = peg$literalExpectation("SVC", false);
            var peg$e70 = peg$literalExpectation("MSR", false);

            var peg$f0 = function (root) { return generateCST(root); };
            var peg$f1 = function (ins) { return new Node("instruccion", ins); };
            var peg$f2 = function (etiq) { return new Node("etiqueta", etiq); };
            var peg$f3 = function (glo) { return new Node("etiqueta", glo); };
            var peg$f4 = function (ed) { return new Node("id", id); };
            var peg$f5 = function (glo) { return new Node("PR", glo); };
            var peg$f6 = function (glo1) { return new Node("PR", glo1); };
            var peg$f7 = function (glo2) { return new Node("PR", glo2); };
            var peg$f8 = function (glo3) { return new Node("PR", glo3); };
            var peg$f9 = function (glo4) { return new Node("PR", glo4); };
            var peg$f10 = function (id) { return new Node("GLOBAL", "." + id); };
            var peg$f11 = function (id) { return new Node("GLOBAL", "." + id); };
            var peg$f12 = function (id) { return new Node("GLOBAL", "." + id); };
            var peg$f13 = function (id) { return new Node("GLOBAL", "." + id); };
            var peg$f14 = function (id) { return new Node("GLOBAL", "." + id); };
            var peg$f15 = function (id) { return new Node("GLOBAL", "." + id); };
            var peg$f16 = function (id) { return new Node("GLOBAL", "." + id); };
            var peg$f17 = function (ide) { return new Node("etiqueta", ide); };
            var peg$f18 = function (ne, li) { return new Node("instruccion", ne, li); };
            var peg$f19 = function (op1, op2) { return new Node("listaOp", op1, op2); };
            var peg$f20 = function (regen) { return new Node("operando", regen); };
            var peg$f21 = function (imd) { return new Node("operando", imd); };
            var peg$f22 = function (ident) { return new Node("identifcador", ident); };
            var peg$f23 = function (op) { return new Node("operando", op); };
            var peg$f24 = function (id) { return new Node("operando", "=" + id); };
            var peg$f25 = function (val) { return new Node("operando", val); };
            var peg$f26 = function (id) { return new Node("id", id); };
            var peg$f27 = function (regigen) { return new Node("registroGen", 'x' + regigen); };
            var peg$f28 = function (regiflo) { return new Node("registroRed", 'w' + regiflo); };
            var peg$f29 = function (inmval) { return new Node("immediateValue", '#', inmval); };
            var peg$f30 = function () { return new Node("registroPila", "SP"); };
            var peg$f31 = function (decim) { return new Node("decimal", decim); };
            var peg$f32 = function (binar) { return new Node("binario", '0b' + binar); };
            var peg$f33 = function (ente) { return new Node("entero", ente); };
            var peg$f34 = function (et1) { return new Node("nemonico", et1); };
            var peg$f35 = function (et2) { return new Node("nemonico", et2); };
            var peg$f36 = function (et3) { return new Node("nemonico", et3); };
            var peg$f37 = function (et4) { return new Node("nemonico", et4); };
            var peg$f38 = function (et5) { return new Node("nemonico", et5); };
            var peg$f39 = function (et6) { return new Node("nemonico", et6); };
            var peg$f40 = function (et7) { return new Node("nemonico", et7); };
            var peg$f41 = function (et8) { return new Node("nemonico", et8); };
            var peg$f42 = function (ins1) { return new Node("instLoad", ins1); };
            var peg$f43 = function (ins2) { return new Node("instLoad", ins2); };
            var peg$f44 = function (ins3) { return new Node("instLoad", ins3); };
            var peg$f45 = function (inst2) { return new Node("instStore", inst2); };
            var peg$f46 = function (inst1) { return new Node("instStore", inst1); };
            var peg$f47 = function (inst3) { return new Node("instStore", inst3); };
            var peg$f48 = function (arit1) { return new Node("instArit", arit1); };
            var peg$f49 = function (arit2) { return new Node("instArit", arit2); };
            var peg$f50 = function (arit3) { return new Node("instArit", arit3); };
            var peg$f51 = function (arit4) { return new Node("instArit", arit4); };
            var peg$f52 = function (arit5) { return new Node("instArit", arit5); };
            var peg$f53 = function (log1) { return new Node("instLog", log1); };
            var peg$f54 = function (log1) { return new Node("instLog", log2); };
            var peg$f55 = function (log1) { return new Node("instLog", log3); };
            var peg$f56 = function (log1) { return new Node("instLog", log4); };
            var peg$f57 = function (des1) { return new Node("instDes", des1); };
            var peg$f58 = function (des2) { return new Node("instDes", des2); };
            var peg$f59 = function (des3) { return new Node("instDes", des3); };
            var peg$f60 = function (des4) { return new Node("instDes", des4); };
            var peg$f61 = function (sal1) { return new Node("instSalto", sal1); };
            var peg$f62 = function (sal2) { return new Node("instSalto", sal2); };
            var peg$f63 = function (sal3) { return new Node("instSalto", sal3); };
            var peg$f64 = function (sal4) { return new Node("instSalto", sal4); };
            var peg$f65 = function (sal5) { return new Node("instSalto", sal5); };
            var peg$f66 = function (sal6) { return new Node("instSalto", sal6); };
            var peg$f67 = function (sal7) { return new Node("instSalto", sal7); };
            var peg$f68 = function (esp1) { return new Node("etiquetaEsp", esp1); };
            var peg$f69 = function (esp2) { return new Node("etiquetaEsp", esp2); };
            var peg$f70 = function (esp3) { return new Node("etiquetaEsp", esp3); };
            var peg$f71 = function (esp4) { return new Node("etiquetaEsp", esp4); };
            var peg$f72 = function (esp5) { return new Node("etiquetaEsp", esp5); };
            var peg$f73 = function (esp6) { return new Node("etiquetaEsp", esp6); };
            var peg$f74 = function (esp7) { return new Node("etiquetaEsp", esp7); };
            var peg$f75 = function (ms) { return new Node("etiquetaPila", ms); };
            var peg$currPos = options.peg$currPos | 0;
            var peg$savedPos = peg$currPos;
            var peg$posDetailsCache = [{ line: 1, column: 1 }];
            var peg$maxFailPos = peg$currPos;
            var peg$maxFailExpected = options.peg$maxFailExpected || [];
            var peg$silentFails = options.peg$silentFails | 0;

            var peg$result;

            if (options.startRule) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }

                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }

            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }

            function offset() {
                return peg$savedPos;
            }

            function range() {
                return {
                    source: peg$source,
                    start: peg$savedPos,
                    end: peg$currPos
                };
            }

            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }

            function expected(description, location) {
                location = location !== undefined
                    ? location
                    : peg$computeLocation(peg$savedPos, peg$currPos);

                throw peg$buildStructuredError(
                    [peg$otherExpectation(description)],
                    input.substring(peg$savedPos, peg$currPos),
                    location
                );
            }

            function error(message, location) {
                location = location !== undefined
                    ? location
                    : peg$computeLocation(peg$savedPos, peg$currPos);

                throw peg$buildSimpleError(message, location);
            }

            function peg$literalExpectation(text, ignoreCase) {
                return { type: "literal", text: text, ignoreCase: ignoreCase };
            }

            function peg$classExpectation(parts, inverted, ignoreCase) {
                return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
            }

            function peg$anyExpectation() {
                return { type: "any" };
            }

            function peg$endExpectation() {
                return { type: "end" };
            }

            function peg$otherExpectation(description) {
                return { type: "other", description: description };
            }

            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos];
                var p;

                if (details) {
                    return details;
                } else {
                    if (pos >= peg$posDetailsCache.length) {
                        p = peg$posDetailsCache.length - 1;
                    } else {
                        p = pos;
                        while (!peg$posDetailsCache[--p]) { }
                    }

                    details = peg$posDetailsCache[p];
                    details = {
                        line: details.line,
                        column: details.column
                    };

                    while (p < pos) {
                        if (input.charCodeAt(p) === 10) {
                            details.line++;
                            details.column = 1;
                        } else {
                            details.column++;
                        }

                        p++;
                    }

                    peg$posDetailsCache[pos] = details;

                    return details;
                }
            }

            function peg$computeLocation(startPos, endPos, offset) {
                var startPosDetails = peg$computePosDetails(startPos);
                var endPosDetails = peg$computePosDetails(endPos);

                var res = {
                    source: peg$source,
                    start: {
                        offset: startPos,
                        line: startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line: endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
                if (offset && peg$source && (typeof peg$source.offset === "function")) {
                    res.start = peg$source.offset(res.start);
                    res.end = peg$source.offset(res.end);
                }
                return res;
            }

            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) { return; }

                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }

                peg$maxFailExpected.push(expected);
            }

            function peg$buildSimpleError(message, location) {
                return new peg$SyntaxError(message, null, null, location);
            }

            function peg$buildStructuredError(expected, found, location) {
                return new peg$SyntaxError(
                    peg$SyntaxError.buildMessage(expected, found),
                    expected,
                    found,
                    location
                );
            }

            function peg$parses() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseglobal();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseglobal();
                }
                s2 = peg$parse_();
                s3 = [];
                s4 = peg$parselinea();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parselinea();
                }
                s4 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f0(s3);

                return s0;
            }

            function peg$parselinea() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseinstruccion();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f1(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$parsecomentario();
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseetiqueta();
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f2(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseglobal();
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f3(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseid();
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f4(s1);
                                }
                                s0 = s1;
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseglobal() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c0) {
                    s1 = peg$c0;
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = input.charAt(peg$currPos);
                    if (peg$r0.test(s3)) {
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e1); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = input.charAt(peg$currPos);
                        if (peg$r1.test(s5)) {
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e2); }
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = input.charAt(peg$currPos);
                            if (peg$r1.test(s5)) {
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e2); }
                            }
                        }
                        s5 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f5(s1);
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c1) {
                        s1 = peg$c1;
                        peg$currPos += 8;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e3); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f6(s1);
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 5) === peg$c2) {
                            s1 = peg$c2;
                            peg$currPos += 5;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e4); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parse_();
                            peg$savedPos = s0;
                            s0 = peg$f7(s1);
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 5) === peg$c3) {
                                s1 = peg$c3;
                                peg$currPos += 5;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e5); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parse_();
                                peg$savedPos = s0;
                                s0 = peg$f8(s1);
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 4) === peg$c4) {
                                    s1 = peg$c4;
                                    peg$currPos += 4;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e6); }
                                }
                                if (s1 !== peg$FAILED) {
                                    s2 = peg$parse_();
                                    peg$savedPos = s0;
                                    s0 = peg$f9(s1);
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parsereservadas();
                                    if (s1 !== peg$FAILED) {
                                        s2 = peg$parse_();
                                        s3 = peg$parsevalor();
                                        if (s3 !== peg$FAILED) {
                                            s1 = [s1, s2, s3];
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parsereservadas() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c5) {
                    s1 = peg$c5;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f10(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 5) === peg$c6) {
                        s1 = peg$c6;
                        peg$currPos += 5;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e8); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f11(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 5) === peg$c7) {
                            s1 = peg$c7;
                            peg$currPos += 5;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e9); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f12(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 6) === peg$c8) {
                                s1 = peg$c8;
                                peg$currPos += 6;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e10); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f13(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 6) === peg$c9) {
                                    s1 = peg$c9;
                                    peg$currPos += 6;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e11); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f14(s1);
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 5) === peg$c10) {
                                        s1 = peg$c10;
                                        peg$currPos += 5;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e12); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f15(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 6) === peg$c11) {
                                            s1 = peg$c11;
                                            peg$currPos += 6;
                                        } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e13); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f16(s1);
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 6) === peg$c12) {
                                                s0 = peg$c12;
                                                peg$currPos += 6;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseetiqueta() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseid();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s2 = peg$c13;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e15); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f17(s1);
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseinstruccion() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parsenemonico();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$parselistaOp();
                    if (s3 === peg$FAILED) {
                        s3 = null;
                    }
                    s4 = peg$parse_();
                    peg$savedPos = s0;
                    s0 = peg$f18(s1, s3);
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parselistaOp() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseoperando();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s4 = peg$c14;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e16); }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        s6 = peg$parseoperando();
                        if (s6 !== peg$FAILED) {
                            s4 = [s4, s5, s6];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s4 = peg$c14;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e16); }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            s6 = peg$parseoperando();
                            if (s6 !== peg$FAILED) {
                                s4 = [s4, s5, s6];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    peg$savedPos = s0;
                    s0 = peg$f19(s1, s2);
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseoperando() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseregistroGen();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f20(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseimmediateValue();
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f21(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseid();
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f22(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 91) {
                                s1 = peg$c15;
                                peg$currPos++;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e17); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parseoperando();
                                if (s2 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s3 = peg$c16;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e18); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f23(s2);
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 61) {
                                    s1 = peg$c17;
                                    peg$currPos++;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e19); }
                                }
                                if (s1 !== peg$FAILED) {
                                    s2 = peg$parseid();
                                    if (s2 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f24(s2);
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parsevalor();
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f25(s1);
                                    }
                                    s0 = s1;
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseid() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = input.charAt(peg$currPos);
                if (peg$r0.test(s1)) {
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = input.charAt(peg$currPos);
                    if (peg$r1.test(s3)) {
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e2); }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = input.charAt(peg$currPos);
                        if (peg$r1.test(s3)) {
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e2); }
                        }
                    }
                    peg$savedPos = s0;
                    s0 = peg$f26(s1);
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseregistroGen() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 120) {
                    s1 = peg$c18;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e20); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = input.charAt(peg$currPos);
                    if (peg$r2.test(s2)) {
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e21); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = input.charAt(peg$currPos);
                        if (peg$r3.test(s4)) {
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e22); }
                        }
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = input.charAt(peg$currPos);
                            if (peg$r3.test(s4)) {
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e22); }
                            }
                        }
                        peg$savedPos = s0;
                        s0 = peg$f27(s2);
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseregistroFlo() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 87) {
                    s1 = peg$c19;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e23); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = input.charAt(peg$currPos);
                    if (peg$r2.test(s2)) {
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e21); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = input.charAt(peg$currPos);
                        if (peg$r3.test(s4)) {
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e22); }
                        }
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = input.charAt(peg$currPos);
                            if (peg$r3.test(s4)) {
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e22); }
                            }
                        }
                        peg$savedPos = s0;
                        s0 = peg$f28(s2);
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseimmediateValue() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 35) {
                    s1 = peg$c20;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e24); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsevalor();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f29(s2);
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseregistroPila() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c21) {
                    s1 = peg$c21;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e25); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f30();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsevalor() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = [];
                s2 = input.charAt(peg$currPos);
                if (peg$r3.test(s2)) {
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = input.charAt(peg$currPos);
                        if (peg$r3.test(s2)) {
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e22); }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s2 = peg$c22;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e26); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = input.charAt(peg$currPos);
                        if (peg$r3.test(s4)) {
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e22); }
                        }
                        if (s4 !== peg$FAILED) {
                            while (s4 !== peg$FAILED) {
                                s3.push(s4);
                                s4 = input.charAt(peg$currPos);
                                if (peg$r3.test(s4)) {
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                                }
                            }
                        } else {
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f31(s1);
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c23) {
                        s1 = peg$c23;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e27); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = input.charAt(peg$currPos);
                        if (peg$r4.test(s3)) {
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e28); }
                        }
                        if (s3 !== peg$FAILED) {
                            while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                s3 = input.charAt(peg$currPos);
                                if (peg$r4.test(s3)) {
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                }
                            }
                        } else {
                            s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f32(s2);
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = [];
                        s2 = input.charAt(peg$currPos);
                        if (peg$r3.test(s2)) {
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e22); }
                        }
                        if (s2 !== peg$FAILED) {
                            while (s2 !== peg$FAILED) {
                                s1.push(s2);
                                s2 = input.charAt(peg$currPos);
                                if (peg$r3.test(s2)) {
                                    peg$currPos++;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                                }
                            }
                        } else {
                            s1 = peg$FAILED;
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f33(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 39) {
                                s1 = peg$c24;
                                peg$currPos++;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e29); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = [];
                                s3 = input.charAt(peg$currPos);
                                if (peg$r5.test(s3)) {
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e30); }
                                }
                                while (s3 !== peg$FAILED) {
                                    s2.push(s3);
                                    s3 = input.charAt(peg$currPos);
                                    if (peg$r5.test(s3)) {
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e30); }
                                    }
                                }
                                if (input.charCodeAt(peg$currPos) === 39) {
                                    s3 = peg$c24;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e29); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parse_();
                                    s1 = [s1, s2, s3, s4];
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                    s1 = peg$c25;
                                    peg$currPos++;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e31); }
                                }
                                if (s1 !== peg$FAILED) {
                                    s2 = [];
                                    s3 = input.charAt(peg$currPos);
                                    if (peg$r6.test(s3)) {
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e32); }
                                    }
                                    while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        s3 = input.charAt(peg$currPos);
                                        if (peg$r6.test(s3)) {
                                            peg$currPos++;
                                        } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e32); }
                                        }
                                    }
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                        s3 = peg$c25;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e31); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                        s4 = peg$parse_();
                                        s1 = [s1, s2, s3, s4];
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parsecomentario() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c26) {
                    s1 = peg$c26;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e33); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    s5 = input.charAt(peg$currPos);
                    if (peg$r7.test(s5)) {
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e34); }
                    }
                    peg$silentFails--;
                    if (s5 === peg$FAILED) {
                        s4 = undefined;
                    } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e35); }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$currPos;
                        peg$silentFails++;
                        s5 = input.charAt(peg$currPos);
                        if (peg$r7.test(s5)) {
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e34); }
                        }
                        peg$silentFails--;
                        if (s5 === peg$FAILED) {
                            s4 = undefined;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e35); }
                            }
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    s3 = peg$parse_();
                    s1 = [s1, s2, s3];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parse_() {
                var s0, s1;

                s0 = [];
                s1 = input.charAt(peg$currPos);
                if (peg$r8.test(s1)) {
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e36); }
                }
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = input.charAt(peg$currPos);
                    if (peg$r8.test(s1)) {
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e36); }
                    }
                }

                return s0;
            }

            function peg$parsenemonico() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseetiquetaPila();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f34(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseetiquetaEsp();
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f35(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseinstSalto();
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f36(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseinstDes();
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f37(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseinstLog();
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f38(s1);
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseinstArit();
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f39(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseinstStore();
                                        if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f40(s1);
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseinstLoad();
                                            if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$f41(s1);
                                            }
                                            s0 = s1;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseinstLoad() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c27) {
                    s1 = peg$c27;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e37); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f42(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 4) === peg$c28) {
                        s1 = peg$c28;
                        peg$currPos += 4;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e38); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f43(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c29) {
                            s1 = peg$c29;
                            peg$currPos += 3;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e39); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f44(s1);
                        }
                        s0 = s1;
                    }
                }

                return s0;
            }

            function peg$parseinstStore() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c30) {
                    s1 = peg$c30;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e40); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f45(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c31) {
                        s1 = peg$c31;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e41); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f46(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c32) {
                            s1 = peg$c32;
                            peg$currPos += 3;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e42); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f47(s1);
                        }
                        s0 = s1;
                    }
                }

                return s0;
            }

            function peg$parseinstArit() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c33) {
                    s1 = peg$c33;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e43); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f48(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c34) {
                        s1 = peg$c34;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e44); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f49(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c35) {
                            s1 = peg$c35;
                            peg$currPos += 3;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e45); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f50(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 4) === peg$c36) {
                                s1 = peg$c36;
                                peg$currPos += 4;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e46); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f51(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 4) === peg$c37) {
                                    s1 = peg$c37;
                                    peg$currPos += 4;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e47); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f52(s1);
                                }
                                s0 = s1;
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseinstLog() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c38) {
                    s1 = peg$c38;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e48); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f53(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c39) {
                        s1 = peg$c39;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e49); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f54(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c40) {
                            s1 = peg$c40;
                            peg$currPos += 3;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e50); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f55(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c41) {
                                s1 = peg$c41;
                                peg$currPos += 3;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e51); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f56(s1);
                            }
                            s0 = s1;
                        }
                    }
                }

                return s0;
            }

            function peg$parseinstDes() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c42) {
                    s1 = peg$c42;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e52); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f57(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c43) {
                        s1 = peg$c43;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e53); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f58(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c44) {
                            s1 = peg$c44;
                            peg$currPos += 3;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e54); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f59(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c45) {
                                s1 = peg$c45;
                                peg$currPos += 3;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e55); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f60(s1);
                            }
                            s0 = s1;
                        }
                    }
                }

                return s0;
            }

            function peg$parseinstSalto() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c46) {
                    s1 = peg$c46;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e56); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f61(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c47) {
                        s1 = peg$c47;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e57); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f62(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c48) {
                            s1 = peg$c48;
                            peg$currPos += 3;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e58); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f63(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c49) {
                                s1 = peg$c49;
                                peg$currPos += 3;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e59); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f64(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 66) {
                                    s1 = peg$c50;
                                    peg$currPos++;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e60); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f65(s1);
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c51) {
                                        s1 = peg$c51;
                                        peg$currPos += 2;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e61); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f66(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 3) === peg$c52) {
                                            s1 = peg$c52;
                                            peg$currPos += 3;
                                        } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e62); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f67(s1);
                                        }
                                        s0 = s1;
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseetiquetaEsp() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c53) {
                    s1 = peg$c53;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e63); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f68(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 4) === peg$c54) {
                        s1 = peg$c54;
                        peg$currPos += 4;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e64); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f69(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 4) === peg$c55) {
                            s1 = peg$c55;
                            peg$currPos += 4;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e65); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f70(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 4) === peg$c56) {
                                s1 = peg$c56;
                                peg$currPos += 4;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e66); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f71(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 3) === peg$c57) {
                                    s1 = peg$c57;
                                    peg$currPos += 3;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e67); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f72(s1);
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 4) === peg$c58) {
                                        s1 = peg$c58;
                                        peg$currPos += 4;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e68); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$f73(s1);
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 3) === peg$c59) {
                                            s1 = peg$c59;
                                            peg$currPos += 3;
                                        } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e69); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$f74(s1);
                                        }
                                        s0 = s1;
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseetiquetaPila() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c60) {
                    s1 = peg$c60;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e70); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f75(s1);
                }
                s0 = s1;

                return s0;
            }


            class Node {
                constructor(value, left = null, right = null) {
                    this.value = value;
                    this.left = left;
                    this.right = right;
                }
            }


            function generateCST(root) {
                return new Node("Program", root);
            }



            peg$result = peg$startRuleFunction();

            if (options.peg$library) {
                return /** @type {any} */ ({
                    peg$result,
                    peg$currPos,
                    peg$FAILED,
                    peg$maxFailExpected,
                    peg$maxFailPos
                });
            }
            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail(peg$endExpectation());
                }

                throw peg$buildStructuredError(
                    peg$maxFailExpected,
                    peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                    peg$maxFailPos < input.length
                        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
                );
            }
        }

        return {
            StartRules: ["s"],
            SyntaxError: peg$SyntaxError,
            parse: peg$parse
        };
    })()
    ;